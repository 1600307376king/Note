-- MySQL dump 10.13  Distrib 5.6.46, for Linux (x86_64)
--
-- Host: localhost    Database: note
-- ------------------------------------------------------
-- Server version	5.6.46

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `notes`
--

DROP TABLE IF EXISTS `notes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `notes` (
  `n_id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `uuid` varchar(255) DEFAULT NULL,
  `note_title` varchar(255) DEFAULT NULL,
  `note_labels` varchar(255) DEFAULT NULL,
  `note_content` mediumtext,
  `note_instructions` text,
  `creation_time` datetime DEFAULT NULL,
  `click_number` int(11) unsigned zerofill DEFAULT '00000000000',
  PRIMARY KEY (`n_id`)
) ENGINE=InnoDB AUTO_INCREMENT=50 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `notes`
--

LOCK TABLES `notes` WRITE;
/*!40000 ALTER TABLE `notes` DISABLE KEYS */;
INSERT INTO `notes` VALUES (13,'0d6a7f1c-0429-11ea-aaeb-001a7dda7113','Apache + flask windows环境搭建','Apache |Flask |Windows |','\n####步骤 1\n* 下载对应版本 Apache mod_wsgi Python\n\n* Apache,mod_wsgi和Python都必须用相同版本的C/C++编译器生成，要么都是32位的，要么都是64位的，不能混用。\n\n* Apache和mod_wsgi 也必须选择相同位数相同VC编译版本（比如：都是x64 VC14编译）\n\n* python flask Apache 下载安装步骤忽略\n\n\n####步骤 2\n* 安装mod_wsgi\n- 下载连接 https://www.lfd.uci.edu/~gohlke/pythonlibs/ 然后选择点击mod_wsgi\n\n- 将下载的文件后缀改为zip，解压出来，拷贝mod_wsgi.cp37-win_amd64.pyd 文件放到C:\\Apache24\\modules 目录，并改名为mod_wsgi.pyd\n\n* 修改 httpd.conf 配置 例Apache配置文件：C:\\Apache24\\conf\\httpd.conf\n- 搜索SRVROOT 并修改apache目录的路径\n\n- 加载mod_wsgi模块，在httpd.conf中找到LoadModule最后一行后面增加行 LoadModule wsgi_module modules/mod_wsgi.pyd\n\n- 修改httpd.conf配置，末尾增加内容：8090端口与apache 监听端口保持一致。\"c:/squirrel\" 为项目路径，以下三个路径保持相同\n\n\n    <VirtualHost *:8090 >\n    ServerAdmin \"0.0.0.0\"\n    DocumentRoot \"c:/squirrel\"\n\n    <Directory \"c:/squirrel\">\n    Require all granted\n    Require host ip\n    Allow from all\n    </Directory>\n    WSGIScriptAlias / c:/squirrel/tests.wsgi\n    </VirtualHost>\n\n\n- 继续修改httpd.conf，找到一下内容启用他\n\n\n    LoadModule access_compat_module modules/mod_access_compat.so #基于主机的组授权（名称或IP地址） httpd 2.x兼容的模块，\n    LoadModule proxy_module modules/mod_proxy.so #apache的代理模块\n    LoadModule proxy_http_module modules/mod_proxy_http.so #代理http和https请求\n    LoadModule vhost_alias_module modules/mod_vhost_alias.so #虚拟主机动态配置\n    LoadModule authz_host_module modules/mod_authz_host.so #基于主机的组授权\n    Include conf/extra/httpd-vhosts.conf#启用虚拟主机配置\n\n\n* 创建一个flask 项目 如命名为web\n\n- 新建文件test.wsgi\n\n- 把刚创建的web目录中的app.py 重命名为main.py 也可以不改，添加如下代码(示例)\n\n\n    from flask import Flask\n\n    app = Flask(__name__)\n\n    @app.route(\'/\')\n    def hello_world():\n    return \'Hello World!\'\n\n    @app.route(\"/index/\")\n    def foo():\n    return \"index page\"\n\n\n    @app.route(\"/login/\")\n    def login():\n    return \"login page\"\n\n    if __name__ == \'__main__\':\n    app.run()\n\n- 添加test.wsgi代码 注意 application 不能改变，\"C:/squirrel\"为项目路径，main 为main.py名称\n\n\n    import sys\n\n    sys.path.insert(0, \"C:/squirrel\")\n\n    from main import app\n\n    application = app\n\n#### 步骤 3\n* 最后启动Apache/bin/目录下cmd 命令输入httpd， 浏览器输入localhost:8090 返回hello world就算配置成功\n','前提条件\n下载对应版本 Apache mod_wsgi Python\nApache,mod_wsgi和Python都必须用相同版本的C/C++编译器生成，要么都是32位的，要么都是64位的，不能混用。\nApache和mod_wsgi 也必须选择相同位数相同VC编译版本（比如：都是x64 VC14编译）\npython flask Apache 下载安装步骤忽略 ','2019-11-11 10:14:55',00000000015),(14,'f97e2b26-0432-11ea-bbf3-001a7dda7113','flask 后端token验证','Flask |Token |','\n#####1.生成token\n    def generate_token(key, expire=3600):\n        ts_str = str(time.time() + expire)\n        ts_byte = ts_str.encode(\"utf-8\")\n        sha1_tshexstr = hmac.new(key.encode(\"utf-8\"), ts_byte, \'sha1\').hexdigest()\n        token = ts_str + \':\' + sha1_tshexstr\n        b64_token = base64.urlsafe_b64encode(token.encode(\"utf-8\"))\n        return b64_token.decode(\"utf-8\")\n\n#####2.验证token,用户id和token\n    def certify_token(key, token):\n        if key == \'null\':\n            return False\n        token_str = base64.urlsafe_b64decode(token).decode(\'utf-8\')\n        token_list = token_str.split(\':\')\n        if len(token_list) != 2:\n            return False\n        ts_str = token_list[0]\n        if float(ts_str) < time.time():\n            # token expired\n            return False\n        known_sha1_tsstr = token_list[1]\n        sha1 = hmac.new(key.encode(\"utf-8\"), ts_str.encode(\'utf-8\'), \'sha1\')\n        calc_sha1_tsstr = sha1.hexdigest()\n        if calc_sha1_tsstr != known_sha1_tsstr:\n            # token certification failed\n            return False\n            # token certification success\n        return True\n\n#####3.用户登录mysql模型\n    from passlib.apps import custom_app_context as pwd_context\n    from app import db\n\n\n    class User(db.Model):\n        __table_name__ = \'user\'\n        user_id = db.Column(db.INT, primary_key=True)\n        user_name = db.Column(db.String(255))\n        user_password = db.Column(db.String(255))\n\n        def __init__(self, **kwargs):\n            self.user_id = kwargs[\'id_u\']\n            self.user_name = kwargs[\'user_name\']\n            self.user_password = kwargs[\'user_password\']\n\n        def hash_password(self, password):\n            self.user_password = pwd_context.encrypt(password)\n\n        def verify_password(self, password):\n            return pwd_context.verify(password, self.user_password)\n\n#####4.登录模板\n    def login():\n        user_name = request.common_form.get(\'user_name\')\n        password = request.common_form.get(\'password\')\n        msg = User.query.filter(User.user_name == user_name).first()\n        if msg\n            if msg.verify_password(password):\n                token = generate_token(str(msg.user_id))\n                return jsonify({\'status\': 200})\n\n\n','flask后端token模板','2019-11-11 11:25:56',00000000004),(15,'e734ae8c-0444-11ea-9fbd-001a7dda7113','cookie 的使用和案例','Cookie |','#### 参考链接https://www.w3school.com.cn/js/js_cookies.asp\n\n##### 1. 基本语法\n######  1.1 方法一\n    # 创建cookie 整个站点可用 name: cookie名称, value: cookie值，expiress: 有效期\n    Cookies.set(\'name\', \'value\'， { expiress:4});\n\n    # 设置有效期15分钟\n    var inFifteenMinutes = new Date(new Date().getTime() + 15 * 60 * 1000);\n    Cookies.set(\'foo\', \'bar\', {\n    expires: inFifteenMinutes\n    });\n\n    # 设置有效路径, 在http://127.0.0.1/path1/路径下cookie有效\n    Cookies.set(\'name\', \'value\', { expires: 4, path: \'/\' });\n    Cookies.set(\'name\', \'value\', { expires: 4, path: \'http://127.0.0.1/path1/xxx.html\' });\n\n    # 读取cookie\n    Cookies.get(\'name\')\n\n    # 读取所有可见cookie：返回的是个json对象；\n    Cookies.get()\n\n    # 删除Cookie\n    Cookies.remove(\'name\')\n    # 删除当前页面所在路径下某个有效的cookie\n    Cookies.set(\'name\', \'value\', { path: \'\' })\n    Cookies.remove(\'name\') // fail!\n    Cookies.remove(\'name\', { path: \'\' }) // removed!\n    # cookie是否编码\n    $.cookie.raw = true;\n\n    # 是否以json格式进行存储和读取\n    $.cookie.json = true;\n\n###### 1.2 方法二\n    # 创建cookie\n    document.cookie = \"username=Bill Gates\";\n\n    # 添加有效日期（UTC 时间）。默认情况下，在浏览器关闭时会删除 cookie\n    document.cookie = \"username=John Doe; expires=Sun, 31 Dec 2017 12:00:00 UTC\";\n\n    # 读取cookie 会在一条字符串中返回所有 cookie，比如：cookie1=value; cookie2=value; cookie3=value\n    var x = document.cookie;\n\n    # 修改cookie\n    document.cookie = \"username=Steve Jobs; expires=Sun, 31 Dec 2017 12:00:00 UTC; path=/\";\n\n    # 删除cookie 直接把 expires 参数设置为过去的日期即可\n    document.cookie = \"username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n\n##### 2 封装cookie的增删改查的函数\n    function setCookie(key, value, iDay) {\n        var oDate = new Date();\n        oDate.setDate(oDate.getDate() + iDay);\n        document.cookie = key + \'=\' + value + \';expires=\' + oDate;\n    }\n\n    function removeCookie(key) {\n        setCookie(key, \'\', -1);//这里只需要把Cookie保质期退回一天便可以删除\n        }\n\n        function getCookie(key) {\n            var cookieArr = document.cookie.split(\'; \');\n            for(var i = 0; i < cookieArr.length; i++) {\n                var arr = cookieArr[i].split(\'=\');\n            if(arr[0] === key) {\n                return arr[1];\n            }\n        }\n        return false;\n    }','cookie 使用教程','2019-11-11 13:34:17',00000000000),(16,'2a3f1a9a-044a-11ea-8216-001a7dda7113','手动创建vue项目命令','Vue|','\n##### 步骤 1\n    vue init webpack my-vue\n    \'my-vue\' 指项目名称\n\n##### 步骤 2 测试运行\n    cd npm run dev\n\n##### 步骤 3 安装项目依赖\n    npm install \n    npm install --registry=https://registry.npm.taobao.org # 利用淘宝镜像加速\n','vue创建','2019-11-11 14:11:57',00000000000),(17,'d741c5c6-044b-11ea-b36b-001a7dda7113','CentOS7.2.1511卸载并重新安装python2.7及yum','Centos|Python2|Yum|','###1.卸载python\n    rpm -qa|grep python|xargs rpm -e --allmatches --nodeps\n    whereis python|xargs rm -fr\n\n###2.卸载yum\n    rpm -qa|grep yum|xargs rpm -e --allmatches --nodeps\n    rm -rf /etc/yum.repos.d/*\n    whereis yum|xargs rm -fr\n\n###3.创建目录python和yum用以存放rpm包\n    mkdir /usr/local/src/python\n    mkdir /usr/local/src/yum\n\n###4.使用wget分别下载python以及yum的rpm包（注意：一定要和系统的版本号对应）\n#####（1）下载python的rpm包\n\n    cd /usr/local/src/python\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-2.7.5-34.el7.x86_64.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-pycurl-7.19.0-17.el7.x86_64.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-devel-2.7.5-34.el7.x86_64.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-libs-2.7.5-34.el7.x86_64.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-urlgrabber-3.10-7.el7.noarch.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/rpm-python-4.11.3-17.el7.x86_64.rpm\n\n\n#####（2）下载yum的rpm包\n    cd /usr/local/src/yum        \n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-3.4.3-132.el7.centos.0.1.noarch.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-34.el7.noarch.rpm\n\n\n###5.安装python以及yum的rpm包\n#####（1）安装python\n    cd /usr/local/src/python\n    rpm -ivh python-*   rpm-python-*\n    # 出现依赖问题使用以下命令\n    rpm -ivh python-*   rpm-python-* --nodeps --force\n    \n#####（2）安装yum\n    cd /usr/local/src/yum \n    rpm -ivh yum-*','误删centOS7.2自带python2.7 导致yum无法正常使用','2019-11-11 14:23:56',00000000003),(18,'7bb127a8-044e-11ea-b14b-001a7dda7113','docker使用命令','Docker |Centos |','## docker hub 账号 docker1996jjc\n##### 1 修改docker存储目录\n    docker info # 查看Docker Root Dir \n    vi /usr/lib/systemd/system/docker.service\n    # 在ExecStart 内添加一下配置，注意不要有多余空格\n    --graph=/home/docker \\\n    --storage-driver=overlay \\\n    systemctl daemon-reload\n    systemctl restart docker\n\n##### 2 从宿主机复制文件至容器\n    docker cp 文件名 容器ID:目标路径\n* 从容器复制文件到宿主机\n    docker cp 容器ID:目标路径 文件名\n\n##### 3 创建虚拟端口的容器 并拥有所有权限\n    docker run -p 8080:80 -d --privileged 镜像ID init\n##### 4 将容器保存为镜像\n    docker commit 容器ID 镜像名称\n##### 5 将镜像保存为文件，将文件转化为镜像\n    docker save -o 文件名 镜像ID\n    docker load < 文件名\n\n##### 6 进入容器和退出\n    docker exec -it 容器ID /bin/bash\n    exit\n\n##### 7 docker 上传 dockerhub\n    docker tag 镜像ID 用户名/镜像ID\n    docker push 用户名/镜像ID\n\n##### 8 docker 镜像重命名\n    docker rename oldname newname\n\n##### 9 docker、容器开机自启动\n    systemctl enable docker\n    docker update --restart=always 容器ID','docker笔记','2019-11-11 14:42:51',00000010898),(19,'b158e608-044e-11ea-8f6e-001a7dda7113','Centos7安装mysql5.6教程','Centos|Mysql|','##### 下载mysql的repo源\n    wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm\n##### 安装mysql-community-release-el7-5.noarch.rpm包\n    rpm -ivh mysql-community-release-el7-5.noarch.rpm\n##### 安装mysql\n    yum install mysql-server\n##### 加入开机启动\n    systemctl enable mysqld\n##### 启动mysql服务进程\n    systemctl start mysqld\n##### 重置密码\n    mysql_secure_installation\n##### mysql -u root -p\n    mysql -u root -p','mysql 安装教程','2019-11-11 14:44:21',00000000004),(20,'f9797a98-044e-11ea-8248-001a7dda7113','Nginx 安装教程 ','Nginx|Centos|','### 1. 卸载Nginx\n##### service nginx stop\n##### whereis nginx\n##### rm -rf [所有相关文件]\n##### yum remove nginx\n\n### 2. 安装\n###### 2.1 安装依赖包\n     yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel\n ##### 2.2 下载源码解压编译\n     wget http://nginx.org/download/nginx-1.17.5.tar.gz\n     tar -zxvf nginx-1.17.5.tar.gz\n     cd nginx-1.17.5\n     ./configure\n     make && make install\n\n## 3. 配置nginx的systemctl命令\n    cd /usr/lib/systemd/system\n    vi nginx.service\n\n ##### 3.1 复制粘贴以下\n    [Unit]\n    Description=The nginx HTTP and reverse proxy server\n    After=network.target remote-fs.target nss-lookup.target\n\n    [Service]\n    Type=forking\n    PIDFile=/usr/local/nginx/logs/nginx.pid\n    ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf\n    ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n    ExecReload=/usr/local/nginx/sbin/nginx -s reload\n    ExecStop=/usr/local/nginx/sbin/nginx -s stop\n    ExecQuit=/usr/local/nginx/sbin/nginx -s quit\n\n    [Install]\n    WantedBy=multi-user.target\n\n##### 3.2 重启服务\n    systemctl daemon-reload\n##### 4 启动nginx,如无法启动检查端口是否被占用\n    systemctl start nginx.service','Nginx 安装教程 在centos7上安装','2019-11-11 14:46:22',00000000004),(21,'ebb15f38-044f-11ea-9f87-001a7dda7113','centos7.2 安装卸载python3.7','Centos |python3 |','###一、安装依赖包\n    yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make -y\n    yum install libffi-devel -y\n\n###二、下载压缩包\n    wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz\n\n###三、解压、安装Python3.7.0\n    tar -zxvf Python-3.7.0.tgz\n    cd Python-3.7.0\n    ./configure\n    make&&make install\n\n###四、配置环境变量\n    mv /usr/bin/python /usr/bin/python.bak\n    ln -s /usr/local/bin/python3 /usr/bin/python\n    mv /usr/bin/pip /usr/bin/pip.bak\n    ln -s /usr/local/bin/pip3 /usr/bin/pip\n\n###五、卸载python3\n    rpm -qa|grep python3|xargs rpm -ev --allmatches --nodeps\n    whereis python3 |xargs rm -frv','centos7.2 安装python3.7','2019-11-11 14:53:09',00000000009),(22,'13d931a2-0450-11ea-b94e-001a7dda7113','两台linux主机文件传送','linux |','##### 1 scp 命令\n    scp -r 文件名 root@192.168.4.44:目标主机保存路径','两台linux主机文件传送','2019-11-11 14:54:16',00000000000),(23,'83835e54-0450-11ea-b891-001a7dda7113','uWSGI 配置','Uwsgi |Centos |','#### 1 centos 7.2 环境下\n##### 1.1 Flask 例子\n    #!/usr/bin/python3\n    from flask import Flask\n\n    app = Flask(__name__)\n\n    @app.route(\"/\")\n    def helloWorld():\n        return \"你好\"\n\n    if __name__ == \'__main__\':\n        app.run(host=\'0.0.0.0\', port=8080)\n##### 1.2 创建uswgi.ini 运行 uwsgi --ini uwsgi.ini\n    [uwsgi]\n    socket = 127.0.0.1:8099 # 选择socket时，ip 与 nginx 对应\n    wsgi-file = app.py\n    callable = app  \n    processes = 4\n    threads = 2\n    #daemonize = /var/www/pj/wsgi.log\n\n##### 1.3 修改nginx 配置文件 nginx.conf\n    # 在server 内配置location\n    location / {\n    include uwsgi_params;\n    uwsgi_pass 0.0.0.0:8099; # 与uwsgi.ini 文件内socket 端口对应\n    }\n    # 静态文件配置\n    location /static {\n        alias /var/www/Note-master/squirrel/static/;\n    }\n\n##### 2 uwsgi 常用命令\n#### 启动：\n    uwsgi --ini uwsgi.ini\n#### 重启：\n    uwsgi --reload uwsgi.pid\n#### 停止：\n    uwsgi --stop uwsgi.pid','uWSGI 配置','2019-11-11 14:57:23',00000000019),(24,'861d3aba-0460-11ea-af63-001a7dda7113','centos7安装配置git ','Centos|Git|','###1、查看是否安装了git\n    rpm -qa|grep git\n\n* 若已经安装，需要先卸载。卸载命令如下：\n\n\n    rpm -e --nodeps git  或者  rpm -e git\n\n###2、安装git\n    yum install -y git\n\n###3、配置信息\n    git config --global user.name \"1600307376king\"\n    git config --global user.email 1600307376@qq.com','centos7安装配置git','2019-11-11 16:52:00',00000000003),(25,'d54971b6-04f2-11ea-8491-001a7dda7113','Centos7解压或压缩','Centos |解压|','###解压zip\n* 解压\n    yum install  -y unzip zip\n    unzip 文件名.zip\n* 压缩\n    zip 文件名.zip 文件名名称或文件名称','Centos7解压','2019-11-12 10:19:19',00000000005),(26,'4a57d692-04f6-11ea-a610-001a7dda7113','浏览器收藏网站','收藏 |','* 机器人图标20000个热门icon图标批量下载-有SVG,PNG,EPS格式-寻图标\n\n\n    http://www.upwqy.com/c-285.html\n* Chatbot Tutorial — PyTorch Tutorials 1.3.0 documentation\n\n\n    https://pytorch.org/tutorials/beginner/chatbot_tutorial.html\n\n* 比特币交易网站\n\n\n    https://www.hpt.com\n\n\n* 微信网页获取用户信息(PHP、python实现) - 简书\n\n\n    https://www.jianshu.com/p/a9c31cd9f67c\n\n* 综合-中国数据-中商产业研究院数据库\n\n\n    http://s.askci.com/data/year/\n\n* 几款ReactJS最优秀的UI框架 - dt1991524的博客\n\n\n    https://blog.csdn.net/dt1991524/article/details/86575597\n\n* HelloGitHub 分享 GitHub 上入门级、有趣的开源项目\n\n\n    https://www.hellogithub.com/','浏览器收藏网站','2019-11-12 10:44:04',00000000011),(27,'9188922e-0517-11ea-96f3-001a7dda7113','pip 安装加速','Pip |','pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 包名\n* 其他网站\n\n\n    清华：https://pypi.tuna.tsinghua.edu.cn/simple\n\n    阿里云：http://mirrors.aliyun.com/pypi/simple/\n\n    中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/\n\n    华中理工大学：http://pypi.hustunique.com/\n\n    山东理工大学：http://pypi.sdutlinux.org/\n\n    豆瓣：http://pypi.douban.com/simple/','pip 安装加速','2019-11-12 14:42:17',00000000023),(28,'9da1e638-051d-11ea-ab4c-001a7dda7113','在Centos中删除创建数据库/导入数据库/导出数据','Centos |Mysql |','####删除数据库命令\n    drop database 数据库名\n\n####创建数据库\n    mysql>create database DATABASE_NAME default character set utf8;\n\n####导入数据库文件\n    mysql>source /usr/database.sql','在Centos中导入sql文件的方法','2019-11-12 15:25:34',00000000014),(29,'a9d5535a-052d-11ea-88bf-001a7dda7113','/bin/sh: warning: setlocale: LC_ALL: cannot change locale (zh_CN.UTF-8) centos7','Centos|乱码|','###物理机解决方法\n    yum -y install kde-l10n-Chinese telnet && \\\n    yum -y reinstall glibc-common\n    vi /etc/locale.conf\n    LC_ALL=\"zh_CN.UTF-8\"\n    source /etc/locale.conf\n\n###docker容器内执行\n     yum -y install kde-l10n-Chinese telnet && \\\n\n                        yum -y reinstall glibc-common &&\\\n\n                        yum clean all  && \\\n\n                        localedef -c -f UTF-8 -i zh_CN zh_CN.utf8  && \\','docker centos 镜像 vi 编辑器乱码','2019-11-12 17:20:26',00000000001),(30,'9131404c-05c9-11ea-aa3e-001a7dda7113','uwsgi: command not found','Uwsgi |','##### 建立软链接\n    find / -name uwsgi\n    ln -s 上一条命令的结果 /usr/bin/uwsgi','uwsgi: command not found','2019-11-13 11:56:27',00000000010),(31,'492cc792-06b1-11ea-8c26-0242ac110002','python freeze','Python |','##### python 导出项目包名\n    pip freeze > requirements.txt\n    pip install -r requirements.txt','python freeze','2019-11-14 15:35:09',00000000002),(32,'659e0f3c-06b4-11ea-8c26-0242ac110002','解决Flask-SQLAlchemy中文乱码问题','Mysql |Centos |','#### 进入mysql 输入status 查看结果中的Client 和 Conn. 属性，如果为latin1则需要修改如下配置\n\n##### 进入mysql的配置文件目录\n    cd /etc/mysql/\n##### 编辑my.cnf配置文件\n    vim my.cnf\n##### 在文件中的[mysqld]下面增加一行内容\n    character_set_server = utf8\n##### 在[client]和[mysql]下面分别增加一行内容\n    default-character-set = utf8\n##### 保存。然后重启MySQL的服务，设置就生效了\n    service mysqld restart','解决Flask-SQLAlchemy中文乱码问题','2019-11-14 15:57:25',00000000003),(33,'b371e484-0760-11ea-a6ea-0242ac110002','配置uwsgi服务','Uwsgi |Centos |','##### 进入目录创建文件\n    vi /etc/systemd/system/uwsgi.service\n\n\n##### 添加如下\n    [Unit]\n    Description=uWSGI instance to serve myproject\n    After=network.target\n\n    [Service]\n    [Unit]\n    Description=uWSGI instance to serve myproject\n    After=network.target\n\n    [Service]\n    WorkingDirectory=/var/www/DNAadmin\n    ExecStart=/usr/bin/uwsgi --ini /var/www/DNAadmin/uwsgi.ini\n    ExecStop=/usr/bin/uwsgi --stop /var/www/DNAadmin/uwsgi.pid\n    ExecReload=/usr/bin/uwsgi --reload /var/www/DNAadmin/uwsgi.pid\n    [Install]\n    WantedBy=multi-user.target\n\n\n##### 重启服务\n    systemctl daemon-reload\n\n##### 注意事项\n    如果uwsgi配置文件中配置了 daemonize=/path/uwsgi.log (uwsgi服务以守护进程运行)\n    会导致sytemctl启动时多次重启而导致启动失败\n    需改为 logto=/path/uwsgi.log','配置uwsgi服务','2019-11-15 12:30:49',00000000010),(34,'350e0fd4-0f65-11ea-ac9a-0242ac110002','centos7 查看端口命令','Centos|','lsof -i tcp:80','centos7 查看端口命令','2019-11-25 09:23:14',00000000000),(35,'02b3ca9e-131e-11ea-ac9a-0242ac110002','服务器被黑排查原因','服务器|','https://www.52wiki.cn/Doc/Read/id/103.html','服务器被黑排查原因','2019-11-30 03:03:40',00000000001),(36,'b63ef16e-14cd-11ea-ac9a-0242ac110002','git 常规操作命令','Git|','##### 本地创建git仓库\n    mkdir learngit\n    cd learngit\n##### git 初始化 添加文件并上传\n    git init\n    git add 文件名\n    git commit -m \"提交说明\"\n    git remote add origin https://github.com/1600307376king/test_rep.git\n    git push -u origin master\n\n##### 从github已有仓库clone项目， 更新项目\n    git clone https://github.com/1600307376king/anti_code.git\n##### 进入项目文件夹并更新\n    git pull https://github.com/1600307376king/anti_code.git','git 常规操作命令','2019-12-02 06:33:54',00000000001),(37,'14334d9c-1a82-11ea-b8d6-0242ac110002','可用的代理地址','代理 |爬虫 |','##### 代理ip网站\n    http://ip.zdaye.com/dayProxy.html\n\n    http://www.xicidaili.com/nn/','可用的代理地址','2019-12-09 12:47:37',00000000002),(38,'4014d6e8-1a8b-11ea-a451-0242ac110002','request 笔记','爬虫 |','#####抓取网页出现乱码，解决方法\n    url=\'http://music.baidu.com\'\n    r=requests.get(url)\n    r.encoding=\'utf-8\'\n    print(r.text)','request 笔记，参考例子','2019-12-09 13:53:16',00000000001),(39,'b6aaf568-1ae9-11ea-a451-0242ac110002','react-bootstrap','React|','https://react-bootstrap.github.io/components/carousel/','react-bootstrap React UI框架','2019-12-10 01:09:28',00000000000),(40,'a6329c6a-1b23-11ea-a451-0242ac110002','CentOS 如何解压文件rar 文件','Centos|Mysql|','##### 下载安装包\n    wget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz\n##### 解压\n    tar -zxvf rarlinux-x64-5.3.0.tar.gz\n##### 编译\n    cd rar\n    make\n#####解压和压缩命令命令\n    rar x tests.rar\n    rar tests.rar ./tests/','CentOS 如何解压文件rar 文件','2019-12-10 08:04:11',00000000001),(41,'2684af2c-1b2c-11ea-a451-0242ac110002','微擎报错FILE: /data/squirrel/partTime/ThinkPHP/Library/Think/Storage/Driver/File.class.php 　LINE: 48','','#####解决方案\n    找到runtime 文件夹给他增加777权限','微擎报错FILE: /data/squirrel/partTime/ThinkPHP/Library/Think/Storage/Driver/File.class.php 　LINE: 48','2019-12-10 09:05:02',00000000000),(42,'f10ea0f6-1b57-11ea-a451-0242ac110002','爬虫xpath使用说明','爬虫 |','7\n         </ul>\n     </div>\n    \'\'\'\n    html = etree.HTML(text)\n    result = html.xpath(\'//li[1]/ancestor::*\')\n    print(result)\n    result = html.xpath(\'//li[1]/ancestor::div\')\n    print(result)\n    result = html.xpath(\'//li[1]/attribute::*\')\n    print(result)\n    result = html.xpath(\'//li[1]/child::a[@href=\"https://ask.hellobi.com/link1.html\"]\')\n    print(result)\n    result = html.xpath(\'//li[1]/descendant::span\')\n    print(result)\n    result = html.xpath(\'//li[1]/following::*[2]\')\n    print(result)\n    result = html.xpath(\'//li[1]/following-sibling::*\')\n    print(result)\n\n* 第一次选择我们调用了 ancestor 轴，可以获取所有祖先节点，其后需要跟两个冒号，然后是节点的选择器，这里我们直接使用了 *，表示匹配所有节点，因此返回结果是第一个 li 节点的所有祖先节点，包括 html，body，div，ul。\n\n* 第二次选择我们又加了限定条件，这次在冒号后面加了 div，这样得到的结果就只有 div 这个祖先节点了。\n\n* 第三次选择我们调用了 attribute 轴，可以获取所有属性值，其后跟的选择器还是 *，这代表获取节点的所有属性，返回值就是 li 节点的所有属性值。\n\n* 第四次选择我们调用了 child 轴，可以获取所有直接子节点，在这里我们又加了限定条件选取 href 属性为 link1.html 的 a 节点。\n\n* 第五次选择我们调用了 descendant 轴，可以获取所有子孙节点，这里我们又加了限定条件获取 span 节点，所以返回的就是只包含 span 节点而没有 a 节点。\n\n* 第六次选择我们调用了 following 轴，可以获取当前节点之后的所有节点，这里我们虽然使用的是 * 匹配，但又加了索引选择，所以只获取了第二个后续节点。\n\n* 第七次选择我们调用了 following-sibling 轴，可以获取当前节点之后的所有同级节点，这里我们使用的是 * 匹配，所以获取了所有后续同级节点。','xpath例子','2019-12-10 14:18:30',00000000001),(43,'3fa2561c-1c26-11ea-a451-0242ac110002','BeautifulSoup教程','爬虫 |','|  解析器 | 使用方法  | 优势  | 劣势  |\n| ------------ | ------------ | ------------ | ------------ |\n| python标准库  |  BeautifulSoup(html, \'html.parser\') | python的内置标准库，执行速度适中文档容错能力强  |  python2.7.3 or 3.2.2之前的版本文档容错能力差 |\n|  lxml Html解析器 | BeautifulSoup(html, \'lxml\')  | 速度快，文档容错能力强  | 需要安装C语言库  |\n|  lxml XML解析器 | BeautifulSoup(html, \'xml\')  |  速度快 唯一支持XML的解析器 |  需要安装C语言库 |\n| html5lib  | BeautifulSoup(html, \'html5lib\')  |   最好的容错性 以浏览器的方式解析文档 生成HTML5格式的文档| 速度慢 不依赖外部扩展 |\n\n\n#####抓取网页\n    from bs4 import BeautifulSoup\n    import requests\n\n    response = requests.get(\'https://www.baidu.com\')\n    bs = BeautifulSoup(html,\"lxml\")\n\n#####获取文档的所有内容\n    print(bs.prettify())\n#####获取a标签的内容\n    print(bs.a)\n#####获取a标签名称\n    print(bs.a.name)\n#####获取a标签的所有属性名和值的字典\n    print(bs.a.attrs)\n#####获取a标签的所有文本\n    print(bs.a.string)\n#####获取第一个a的id值\n    print(bs.a[\"id\"])\n#####有的a标签中的所有内容\n    print(bs.find_all(\"a\")) # 获取id=\"u1\"\n#####获取id值为ul的元素\n    print(bs.find(id=\"u1\"))\n#####输出所有a标签href值\n    for item in bs.find_all(\"a\"):\n        print(item.get(\"href\"))\n#####获取所有a标签的文本值\n    for item in bs.find_all(\"a\"):\n        print(item.get_text())','BeautifulSoup教程','2019-12-11 14:55:19',00000000002),(44,'7b40ad36-1ca8-11ea-a451-0242ac110002','创建基于centos7的python 3.7镜像','Centos|python3|','####创建路径\n    mkdir dockerImage\n    cd dockerImage\n\n####下载python3.7.4源码安装包：\n    wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tar.xz\n\n####创建Dockerfile文件：\n    FROM docker.io/centos:latest #基础镜像\n    WORKDIR /root #工作路径\n    COPY Python-3.7.4.tar.xz /root #将宿主机中的python源码包拷贝到根目录\n    RUN yum -y install zlib-devel openssl-devel libffi-devel gcc make \\ #安装依赖包\n    &&tar -xf /root/Python-3.7.4.tar.xz \\ #解压源码包\n    &&rm -rf /root/Python-3.7.4.tar.xz \\ #删除源码压缩包\n    &&cd /root/Python-3.7.4 \\ #切换路径到解压目录\n    &&./configure \\ #预编译生产makefile\n    &&make \\ #编译\n    &&make install \\ #安装\n    &&pip3 install --upgrade pip \\ #更新pip\n    &&rm -rf /root/Python-3.7.4 #删除安装包\n    CMD /bin/bash\n\n####创建镜像\n    docker build -t python3.7-centos7:v1 . #注意有一个点','创建基于centos7的python 3.7镜像','2019-12-12 06:27:33',00000000000),(45,'52b0e872-1f46-11ea-a451-0242ac110002','pandas 数据访问','Pandas |python3 |','##参考网址\n    https://www.yiibai.com/pandas\n## dataframe示例\n\n|   | a  | b  | c |\n| ------------ | ------------ | ------------ |\n| c  | 1  | 3  | 5 |\n| d  | 2  | 4 | 6 |\n| e  | 7  | 8 | 9 |\n\n## 直接访问\n* df[\'a\'] 或 df.a, 若a为整数则后者无法使用， 列名访问列数据 返回Series\n\n##df.loc\n\n* df.loc[\'c\'], 加索引号，返回Series\n\n\n* df.loc[\'c\': \'d\', \'a\': \'b\']，索引序列和列名序列同时筛选, 返回Dataframe\n\n\n* df.loc[[\'c\', \'e\'], [\'a\', \'c\']], 指定索引列表和列名列表筛选， 返回Dataframe\n\n* df.loc[\'c\': \'e\', [\'a\': \'c\']]，索引序列和列名列表混合同时筛选，返回Dataframe\n\n* df.loc[\'a\': \'b\']，索引序列筛选, 1, 2为index值，返回Dataframe\n\n* df.loc[:, [\'a\']] > 0 将筛选结果和0逐一比较，前提需类型都为整型，返回True 或False Dataframe\n\n##df.iloc\n* df.iloc[0] 第一行数据， 返回Series\n\n* df.iloc[0:2] 2行数据，返回Dataframe\n\n* df.iloc[1:2, 2:3], 第一行第二列数据， 返回Dataframe\n\n* df.iloc[[0, 2], [0, 2]] 第一行第一列和第三行第三列， 返回Dataframe\n\n## df.at 选取单个值，参数为索引值和字段值\n* df.at[\'c\', \'a\'], 选取c行a列值， 返回值\n\n##df.iat 选取单个值, 参数为整型','pandas 数据访问教程','2019-12-15 14:22:28',00000000002),(46,'b303a7f2-1fcb-11ea-a451-0242ac110002','mysql 查看操作日志','Mysql|','### 查看日志记录是否打开\n    show variables where Variable_name=\"general_log\";\n\n\n### 如果时off 执行以下命令\n    set global general_log=on;\n\n### cha查看日志文件位置\n    show variables where Variable_name=\"general_log_file\";\n\n### 查找文件\n    find / -name \'文件名\'','通过查看查询日志查看最近操作的命令记录','2019-12-16 06:17:13',00000000000),(47,'bf7122a8-220f-11ea-a451-0242ac110002','ssr配置','Vpn|','####服务器用户名\n* 1600307376@qq.com\n\n####服务器密码\n* JAmes23love\n\n####服务器IP\n* 43.224.33.153\n\n####端口号\n* 2019\n\n####密码\n* 123456\n\n####加密\n* aes-256-cfb','ssr配置','2019-12-19 03:29:21',00000000000),(48,'b2a12596-2214-11ea-b50d-0242ac110002','Nginx80端口转发+域名——实现IP+端口隐藏','Nginx|','https://www.cnblogs.com/caiba/p/9494573.html','Nginx80端口转发+域名——实现IP+端口隐藏','2019-12-19 04:04:47',00000000000),(49,'cf7691c8-2224-11ea-b50d-0242ac110002','宝塔面板登录账号密码','','账号helloworld\n密码james23love','宝塔面板登录账号密码','2019-12-19 06:00:08',00000000000);
/*!40000 ALTER TABLE `notes` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-12-20  9:33:43
