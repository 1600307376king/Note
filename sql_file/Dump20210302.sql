CREATE DATABASE  IF NOT EXISTS `note` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `note`;
-- MySQL dump 10.13  Distrib 8.0.19, for Win64 (x86_64)
--
-- Host: localhost    Database: note
-- ------------------------------------------------------
-- Server version	8.0.19

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `admin_info`
--

DROP TABLE IF EXISTS `admin_info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `admin_info` (
  `id` int NOT NULL AUTO_INCREMENT,
  `adminName` varchar(21) COLLATE utf8mb4_bin DEFAULT NULL,
  `passwordHash` varchar(255) COLLATE utf8mb4_bin DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `admin_info`
--

LOCK TABLES `admin_info` WRITE;
/*!40000 ALTER TABLE `admin_info` DISABLE KEYS */;
INSERT INTO `admin_info` VALUES (8,'admin','pbkdf2:sha256:150000$0Mddz985$17d04443e773bd547e00293e83e6bba5d8bb78f782c56ef1b8278f9223e1552a'),(10,'public','pbkdf2:sha256:150000$W4QDv7rs$92229bbd6901841e47e907c68e04298eaa069f02b48a7402c9ead846f12d090d'),(11,'jjc','pbkdf2:sha256:150000$WkLueqMX$76625bbb19eed68c583ef38aa00ac2a3714124a6af58c4a6778c32b668a88030');
/*!40000 ALTER TABLE `admin_info` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `alembic_version`
--

DROP TABLE IF EXISTS `alembic_version`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `alembic_version` (
  `version_num` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin  NOT NULL,
  PRIMARY KEY (`version_num`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `alembic_version`
--

LOCK TABLES `alembic_version` WRITE;
/*!40000 ALTER TABLE `alembic_version` DISABLE KEYS */;
INSERT INTO `alembic_version` VALUES ('a6c79b608b9c');
/*!40000 ALTER TABLE `alembic_version` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `notes`
--

DROP TABLE IF EXISTS `notes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `notes` (
  `uuid` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin  NOT NULL,
  `note_title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin  DEFAULT NULL,
  `note_labels` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin  DEFAULT NULL,
  `note_content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin ,
  `note_instructions` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin ,
  `creation_time` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin  DEFAULT NULL,
  `click_number` int(11) unsigned zerofill DEFAULT NULL,
  PRIMARY KEY (`uuid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `notes`
--

LOCK TABLES `notes` WRITE;
/*!40000 ALTER TABLE `notes` DISABLE KEYS */;
INSERT INTO `notes` VALUES ('02b3ca9e-131e-11ea-ac9a-0242ac110002','服务器被黑排查原因','服务器|','https://www.52wiki.cn/Doc/Read/id/103.html','服务器被黑排查原因','2019-11-30 03:03:40',00000000001),('10bddc28-35dc-11ea-846e-04d9f57ee6f5','flask开发总结','Flask|Python|','###1. 创建初始项目\n    mkdir flask_pj\n    cd flask_pj\n###2. 安装虚拟环境\n    pip install virtualenv\n    virtualenv venv\n#####2.1 linux启动\n    source /venv/bin/activate\n#####2.2 windows启动\n    cd venv/scripts\n    activate.bat\n#####2.3 退出虚拟环境\n    deactivate或deactivate.bat\n###3. 安装flask\n    pip install flask\n#####3.1 将现有安装包信息保存在requirements.txt文件中\n    pip freeze > requirements.txt\n#####3.2 更换环境后可执行以下命令安装需要的包\n    pip insatll -r requirements.txt\n###4 flask 上下文全局变量\n* current_app 应用上下文 当前应用的应用示例\n* g 应用上下文 处理请求时的存储对象，每次请求都会重置这个变量\n* request 请求上下文 请求对象，封装客户端发出Http请求\n* session 请求上下文 用户绘画，key-value方式存储\n####相关扩展配合jinja2\n* flask-bootstrap\n* flask-moment 自适应不同地区用户的当前时间和所在地点\n* flask-wtf 表单\n####其他扩展\n#####命令管理\n* flask-script\n#####富文本\n* pagedown\n* flask-pagedown\n* markdown\n* bleach\n#####数据库操作\n* flask-sqlalchemy\n* flask-migrate\n#####电子邮件\n* flask-mail\n#####测试\n* unittest、pytest\n#####身份验证\n* flask-login\n* werkzeug\n* itsdangerous\n###5 项目结构\n>project_name\n>>app_name\n>>>templates\n>>>static\n>>>main\n>>>>errors.py\n>>>>froms.py\n>>>>other_view.py\n>>migrations\n>>tests\n>>venv','flask','2020-01-13 16:09:47',00000000002),('12b9c8ae-27f4-11ea-9281-0242ac110003','matplotlib绘图示例--线图2','Matplotlib|lsls|','####直线图示例\n\n    x = np.arange(5)\n    y = 2*x+1\n\n    # 线图\n    plt.plot(x, y, \'-r\', marker=\'o\', markersize=6, markerfacecolor=\'g\', linestyle=\'-\', linewidth=1, label=\'y=2x+1\', alpha=0.8)\n    plt.title(\'Graph of y=2x+1\')\n\n    # 设置 x, y 值从什么时候开始到什么值结束\n    plt.xlim(0, 5)\n    plt.ylim(0, 9)\n\n    # 横纵坐标标签设置\n    plt.xlabel(\'x\', color=\'#1C2833\')\n    plt.ylabel(\'y\', color=\'#1C2833\')\n\n    # 坐标轴显示内容，第一个参数为刻度分布，第二个为刻度显示内容， 第三个参数为刻度旋转角度 \n    plt.xticks([0, 1, 2, 3, 4], [\'0\', \'1\', \'2\', \'3\', \'4\'], rotation=-40)\n    plt.yticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], list(\'0123456789\'))\n\n    # 显示图例 loc表示位置\n    plt.legend(loc=\'upper left\')\n\n    # 绘制刻度线的网格线, linestyle直线类型、 颜色\n    plt.grid(linestyle=\'-\', color=\'blue\', which=\'minor\')\n\n    plt.show()','matplotlib绘图示例--线图2','2019-12-26 23:26:22',00000000008),('13d931a2-0450-11ea-b94e-001a7dda7113','两台linux主机文件传送','linux |','##### 1 scp 命令\n    scp -r 文件名 root@192.168.4.44:目标主机保存路径','两台linux主机文件传送','2019-11-11 14:54:16',00000000000),('14334d9c-1a82-11ea-b8d6-0242ac110002','可用的代理地址','代理 |爬虫 |','##### 代理ip网站\n    http://ip.zdaye.com/dayProxy.html\n\n    http://www.xicidaili.com/nn/','可用的代理地址','2019-12-09 12:47:37',00000000002),('2684af2c-1b2c-11ea-a451-0242ac110002','微擎报错FILE: /data/web/partTime/ThinkPHP/Library/Think/Storage/Driver/File.class.php 　LINE: 48','','#####解决方案\n    找到runtime 文件夹给他增加777权限','微擎报错FILE: /data/web/partTime/ThinkPHP/Library/Think/Storage/Driver/File.class.php 　LINE: 48','2019-12-10 09:05:02',00000000000),('2a3f1a9a-044a-11ea-8216-001a7dda7113','手动创建vue项目命令','Vue|','\n##### 步骤 1\n    vue init webpack my-vue\n    \'my-vue\' 指项目名称\n\n##### 步骤 2 测试运行\n    cd npm run dev\n\n##### 步骤 3 安装项目依赖\n    npm install \n    npm install --registry=https://registry.npm.taobao.org # 利用淘宝镜像加速\n','vue创建','2019-11-11 14:11:57',00000000001),('350e0fd4-0f65-11ea-ac9a-0242ac110002','centos7 查看端口命令','Centos|','lsof -i tcp:80','centos7 查看端口命令','2019-11-25 09:23:14',00000000000),('3b2a95a2-2f0b-11ea-9fa7-04d9f57ee6f5','docker','Docker |','###adad\n\n* aasaas\n\n\n    asass\n\n* sdfsafasf\n\n\n    dgsdgfd\n','adadada','2020-01-04 23:59:47',00000000006),('3fa2561c-1c26-11ea-a451-0242ac110002','BeautifulSoup教程','爬虫 |','|  解析器 | 使用方法  | 优势  | 劣势  |\n| ------------ | ------------ | ------------ | ------------ |\n| python标准库  |  BeautifulSoup(html, \'html.parser\') | python的内置标准库，执行速度适中文档容错能力强  |  python2.7.3 or 3.2.2之前的版本文档容错能力差 |\n|  lxml Html解析器 | BeautifulSoup(html, \'lxml\')  | 速度快，文档容错能力强  | 需要安装C语言库  |\n|  lxml XML解析器 | BeautifulSoup(html, \'xml\')  |  速度快 唯一支持XML的解析器 |  需要安装C语言库 |\n| html5lib  | BeautifulSoup(html, \'html5lib\')  |   最好的容错性 以浏览器的方式解析文档 生成HTML5格式的文档| 速度慢 不依赖外部扩展 |\n\n\n#####抓取网页\n    from bs4 import BeautifulSoup\n    import requests\n\n    response = requests.get(\'https://www.baidu.com\')\n    bs = BeautifulSoup(html,\"lxml\")\n\n#####获取文档的所有内容\n    print(bs.prettify())\n#####获取a标签的内容\n    print(bs.a)\n#####获取a标签名称\n    print(bs.a.name)\n#####获取a标签的所有属性名和值的字典\n    print(bs.a.attrs)\n#####获取a标签的所有文本\n    print(bs.a.string)\n#####获取第一个a的id值\n    print(bs.a[\"id\"])\n#####有的a标签中的所有内容\n    print(bs.find_all(\"a\")) # 获取id=\"u1\"\n#####获取id值为ul的元素\n    print(bs.find(id=\"u1\"))\n#####输出所有a标签href值\n    for item in bs.find_all(\"a\"):\n        print(item.get(\"href\"))\n#####获取所有a标签的文本值\n    for item in bs.find_all(\"a\"):\n        print(item.get_text())','BeautifulSoup教程','2019-12-11 14:55:19',00000000003),('4014d6e8-1a8b-11ea-a451-0242ac110002','request 笔记','爬虫 |','#####抓取网页出现乱码，解决方法\n    url=\'http://music.baidu.com\'\n    r=requests.get(url)\n    r.encoding=\'utf-8\'\n    print(r.text)','request 笔记，参考例子','2019-12-09 13:53:16',00000000001),('492cc792-06b1-11ea-8c26-0242ac110002','python freeze','Python |','##### python 导出项目包名\n    pip freeze > requirements.txt\n    pip install -r requirements.txt','python freeze','2019-11-14 15:35:09',00000000002),('52b0e872-1f46-11ea-a451-0242ac110002','pandas 数据访问','Pandas |python|','##参考网址\n    https://www.yiibai.com/pandas\n## dataframe示例\n\n|   | a  | b  | c |\n| ------------ | ------------ | ------------ |\n| c  | 1  | 3  | 5 |\n| d  | 2  | 4 | 6 |\n| e  | 7  | 8 | 9 |\n\n## 直接访问\n* df[\'a\'] 或 df.a, 若a为整数则后者无法使用， 列名访问列数据 返回Series\n\n##df.loc\n\n* df.loc[\'c\'], 加索引号，返回Series\n\n\n* df.loc[\'c\': \'d\', \'a\': \'b\']，索引序列和列名序列同时筛选, 返回Dataframe\n\n\n* df.loc[[\'c\', \'e\'], [\'a\', \'c\']], 指定索引列表和列名列表筛选， 返回Dataframe\n\n* df.loc[\'c\': \'e\', [\'a\': \'c\']]，索引序列和列名列表混合同时筛选，返回Dataframe\n\n* df.loc[\'a\': \'b\']，索引序列筛选, 1, 2为index值，返回Dataframe\n\n* df.loc[:, [\'a\']] > 0 将筛选结果和0逐一比较，前提需类型都为整型，返回True 或False Dataframe\n\n##df.iloc\n* df.iloc[0] 第一行数据， 返回Series\n\n* df.iloc[0:2] 2行数据，返回Dataframe\n\n* df.iloc[1:2, 2:3], 第一行第二列数据， 返回Dataframe\n\n* df.iloc[[0, 2], [0, 2]] 第一行第一列和第三行第三列， 返回Dataframe\n\n## df.at 选取单个值，参数为索引值和字段值\n* df.at[\'c\', \'a\'], 选取c行a列值， 返回值\n\n##df.iat 选取单个值, 参数为整型','pandas 数据访问教程','2019-12-15 14:22:28',00000000004),('659e0f3c-06b4-11ea-8c26-0242ac110002','解决Flask-SQLAlchemy中文乱码问题','Mysql |Centos |','#### 进入mysql 输入status 查看结果中的Client 和 Conn. 属性，如果为latin1则需要修改如下配置\n\n##### 进入mysql的配置文件目录\n    cd /etc/mysql/\n##### 编辑my.cnf配置文件\n    vim my.cnf\n##### 在文件中的[mysqld]下面增加一行内容\n    character_set_server = utf8\n##### 在[client]和[mysql]下面分别增加一行内容\n    default-character-set = utf8\n##### 保存。然后重启MySQL的服务，设置就生效了\n    service mysqld restart','解决Flask-SQLAlchemy中文乱码问题','2019-11-14 15:57:25',00000000005),('7b40ad36-1ca8-11ea-a451-0242ac110002','创建基于centos7的python 3.7镜像','Centos|python|','####创建路径\n    mkdir dockerImage\n    cd dockerImage\n\n####下载python3.7.4源码安装包：\n    wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tar.xz\n\n####创建Dockerfile文件：\n    FROM docker.io/centos:latest #基础镜像\n    WORKDIR /root #工作路径\n    COPY Python-3.7.4.tar.xz /root #将宿主机中的python源码包拷贝到根目录\n    RUN yum -y install zlib-devel openssl-devel libffi-devel gcc make \\ #安装依赖包\n    &&tar -xf /root/Python-3.7.4.tar.xz \\ #解压源码包\n    &&rm -rf /root/Python-3.7.4.tar.xz \\ #删除源码压缩包\n    &&cd /root/Python-3.7.4 \\ #切换路径到解压目录\n    &&./configure \\ #预编译生产makefile\n    &&make \\ #编译\n    &&make install \\ #安装\n    &&pip3 install --upgrade pip \\ #更新pip\n    &&rm -rf /root/Python-3.7.4 #删除安装包\n    CMD /bin/bash\n\n####创建镜像\n    docker build -t python3.7-centos7:v1 . #注意有一个点','创建基于centos7的python 3.7镜像','2019-12-12 06:27:33',00000000000),('861d3aba-0460-11ea-af63-001a7dda7113','centos7安装配置git ','Centos|Git|','###1、查看是否安装了git\n    rpm -qa|grep git\n\n* 若已经安装，需要先卸载。卸载命令如下：\n\n\n    rpm -e --nodeps git  或者  rpm -e git\n\n###2、安装git\n    yum install -y git\n\n###3、配置信息\n    git config --global user.name \"1600307376king\"\n    git config --global user.email 1600307376@qq.com','centos7安装配置git','2019-11-11 16:52:00',00000000005),('a6329c6a-1b23-11ea-a451-0242ac110002','CentOS 如何解压文件rar 文件','Centos|Mysql|','##### 下载安装包\n    wget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz\n##### 解压\n    tar -zxvf rarlinux-x64-5.3.0.tar.gz\n##### 编译\n    cd rar\n    make\n#####解压和压缩命令命令\n    rar x test.rar\n    rar test.rar ./test/','CentOS 如何解压文件rar 文件','2019-12-10 08:04:11',00000000001),('a9d5535a-052d-11ea-88bf-001a7dda7113','/bin/sh: warning: setlocale: LC_ALL: cannot change locale (zh_CN.UTF-8) centos7','Centos|乱码|','###物理机解决方法\n    yum -y install kde-l10n-Chinese telnet && \\\n    yum -y reinstall glibc-common\n    vi /etc/locale.conf\n    LC_ALL=\"zh_CN.UTF-8\"\n    source /etc/locale.conf\n\n###docker容器内执行\n     yum -y install kde-l10n-Chinese telnet && \\\n\n                        yum -y reinstall glibc-common &&\\\n\n                        yum clean all  && \\\n\n                        localedef -c -f UTF-8 -i zh_CN zh_CN.utf8  && \\','docker centos 镜像 vi 编辑器乱码','2019-11-12 17:20:26',00000000002),('b2a12596-2214-11ea-b50d-0242ac110002','Nginx80端口转发+域名——实现IP+端口隐藏','Nginx|','https://www.cnblogs.com/caiba/p/9494573.html','Nginx80端口转发+域名——实现IP+端口隐藏','2019-12-19 04:04:47',00000000000),('b303a7f2-1fcb-11ea-a451-0242ac110002','mysql 查看操作日志','Mysql|','### 查看日志记录是否打开\n    show variables where Variable_name=\"general_log\";\n\n\n### 如果时off 执行以下命令\n    set global general_log=on;\n\n### cha查看日志文件位置\n    show variables where Variable_name=\"general_log_file\";\n\n### 查找文件\n    find / -name \'文件名\'','通过查看查询日志查看最近操作的命令记录','2019-12-16 06:17:13',00000000002),('b63ef16e-14cd-11ea-ac9a-0242ac110002','git 常规操作命令','Git|','##### 本地创建git仓库\n    mkdir learngit\n    cd learngit\n##### git 初始化 添加文件并上传\n    git init\n    git add 文件名\n    git commit -m \"提交说明\"\n    git remote add origin https://github.com/1600307376king/test_rep.git\n    git push -u origin master\n\n##### 从github已有仓库clone项目， 更新项目\n    git clone https://github.com/1600307376king/anti_code.git\n##### 进入项目文件夹并更新\n    git pull https://github.com/1600307376king/anti_code.git','git 常规操作命令','2019-12-02 06:33:54',00000000001),('b6aaf568-1ae9-11ea-a451-0242ac110002','react-bootstrap','React|','https://react-bootstrap.github.io/components/carousel/','react-bootstrap React UI框架','2019-12-10 01:09:28',00000000000),('bf7122a8-220f-11ea-a451-0242ac110002','ssr配置','Vpn|','####服务器用户名\n* 1600307376@qq.com\n\n####服务器密码\n* JAmes23love\n\n####服务器IP\n* 43.224.33.153\n\n####端口号\n* 2019\n\n####密码\n* 123456\n\n####加密\n* aes-256-cfb','ssr配置','2019-12-19 03:29:21',00000000001),('c99948c6-259f-11ea-8974-0242ac110002','django 数据迁移报错','Django|','###1. 前往以下指定路径\n    \"C:\\Users\\Administrator\\PycharmProjects\\video_admin\\venv\\lib\\site-packages\\django\\db\\backends\\mysql\\base.py\"\"C:\\Users\\Administrator\\PycharmProjects\\video_admin\\venv\\lib\\site-packages\\django\\db\\backends\\mysql\\base.py\"\n\n###2. 注释掉代码\n    #if version < (1, 3, 13):\n        # raise ImproperlyConfigured(\'mysqlclient 1.3.13 or newer is required; you have %s.\' % Database.__version__)','报错情况 File \"C:\\Users\\Administrator\\PycharmProjects\\video_admin\\venv\\lib\\site-packages\\django\\db\\backends\\mysql\\base.py\", line 37, in <module> raise ImproperlyConfigured(\'mysqlclient 1.3.13 or newer is required; you have %s.\' % Database.__version__) django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3.','2019-12-23 16:18:00',00000000001),('cf7691c8-2224-11ea-b50d-0242ac110002','宝塔面板登录账号密码','','账号helloworld\n密码james23love','宝塔面板登录账号密码','2019-12-19 06:00:08',00000000000),('d54971b6-04f2-11ea-8491-001a7dda7113','Centos7解压或压缩','Centos |解压|','###解压zip\n* 解压\n    yum install  -y unzip zip\n    unzip 文件名.zip\n* 压缩\n    zip 文件名.zip 文件名名称或文件名称','Centos7解压','2019-11-12 10:19:19',00000000022),('d741c5c6-044b-11ea-b36b-001a7dda7113','CentOS7.2.1511卸载并重新安装python2.7及yum','Centos|Python|Yum|','###1.卸载python\n    rpm -qa|grep python|xargs rpm -e --allmatches --nodeps\n    whereis python|xargs rm -fr\n\n###2.卸载yum\n    rpm -qa|grep yum|xargs rpm -e --allmatches --nodeps\n    rm -rf /etc/yum.repos.d/*\n    whereis yum|xargs rm -fr\n\n###3.创建目录python和yum用以存放rpm包\n    mkdir /usr/local/src/python\n    mkdir /usr/local/src/yum\n\n###4.使用wget分别下载python以及yum的rpm包（注意：一定要和系统的版本号对应）\n#####（1）下载python的rpm包\n\n    cd /usr/local/src/python\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-2.7.5-34.el7.x86_64.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-pycurl-7.19.0-17.el7.x86_64.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-devel-2.7.5-34.el7.x86_64.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-libs-2.7.5-34.el7.x86_64.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/python-urlgrabber-3.10-7.el7.noarch.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/rpm-python-4.11.3-17.el7.x86_64.rpm\n\n\n#####（2）下载yum的rpm包\n    cd /usr/local/src/yum        \n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-3.4.3-132.el7.centos.0.1.noarch.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm\n    wget http://vault.centos.org/7.2.1511/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-34.el7.noarch.rpm\n\n\n###5.安装python以及yum的rpm包\n#####（1）安装python\n    cd /usr/local/src/python\n    rpm -ivh python-*   rpm-python-*\n    # 出现依赖问题使用以下命令\n    rpm -ivh python-*   rpm-python-* --nodeps --force\n    \n#####（2）安装yum\n    cd /usr/local/src/yum \n    rpm -ivh yum-*','误删centOS7.2自带python2.7 导致yum无法正常使用','2019-11-11 14:23:56',00000000005),('dab29ca2-27ed-11ea-9281-0242ac110003','matplotlib.pyplot函数参数参考','Matplotlib|','##plt.title()\n#####参数\n* fontsize, 可选值[\'xx-small\', \'x-small\', \'small\', \'medium\', \'large\', \'x-large\', \'xx-large\']\n* fontweight, 可选值[\'light\', \'normal\', \'medium\', \'semibold\', \'bold\', \'heavy\', \'black\']\n* fontstyle, 可选值[\'normal\', \'italic\', \'oblique\']\n* verticalalignment设置水平对齐方式, 可选值[\'center\', \'top\', \'bottom\', \'baseline\']\n* horizontalalignment设置垂直对齐方式，可选参数：left,right,center\n* rotation(旋转角度)可选参数为:vertical,horizontal 也可以为数字\n* alpha透明度，参数值0至1之间\n* backgroundcolor标题背景颜色\n* bbox给标题增加外框 ，常用参数如下：\n    * boxstyle方框外形\n\n##plt.xlabel()\n#####参数','matplotlib.pyplot函数参数参考','2019-12-26 22:41:51',00000000001),('e734ae8c-0444-11ea-9fbd-001a7dda7113','cookie 的使用和案例','Cookie |','#### 参考链接https://www.w3school.com.cn/js/js_cookies.asp\n\n##### 1. 基本语法\n######  1.1 方法一\n    # 创建cookie 整个站点可用 name: cookie名称, value: cookie值，expiress: 有效期\n    Cookies.set(\'name\', \'value\'， { expiress:4});\n\n    # 设置有效期15分钟\n    var inFifteenMinutes = new Date(new Date().getTime() + 15 * 60 * 1000);\n    Cookies.set(\'foo\', \'bar\', {\n    expires: inFifteenMinutes\n    });\n\n    # 设置有效路径, 在http://127.0.0.1/path1/路径下cookie有效\n    Cookies.set(\'name\', \'value\', { expires: 4, path: \'/\' });\n    Cookies.set(\'name\', \'value\', { expires: 4, path: \'http://127.0.0.1/path1/xxx.html\' });\n\n    # 读取cookie\n    Cookies.get(\'name\')\n\n    # 读取所有可见cookie：返回的是个json对象；\n    Cookies.get()\n\n    # 删除Cookie\n    Cookies.remove(\'name\')\n    # 删除当前页面所在路径下某个有效的cookie\n    Cookies.set(\'name\', \'value\', { path: \'\' })\n    Cookies.remove(\'name\') // fail!\n    Cookies.remove(\'name\', { path: \'\' }) // removed!\n    # cookie是否编码\n    $.cookie.raw = true;\n\n    # 是否以json格式进行存储和读取\n    $.cookie.json = true;\n\n###### 1.2 方法二\n    # 创建cookie\n    document.cookie = \"username=Bill Gates\";\n\n    # 添加有效日期（UTC 时间）。默认情况下，在浏览器关闭时会删除 cookie\n    document.cookie = \"username=John Doe; expires=Sun, 31 Dec 2017 12:00:00 UTC\";\n\n    # 读取cookie 会在一条字符串中返回所有 cookie，比如：cookie1=value; cookie2=value; cookie3=value\n    var x = document.cookie;\n\n    # 修改cookie\n    document.cookie = \"username=Steve Jobs; expires=Sun, 31 Dec 2017 12:00:00 UTC; path=/\";\n\n    # 删除cookie 直接把 expires 参数设置为过去的日期即可\n    document.cookie = \"username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n\n##### 2 封装cookie的增删改查的函数\n    function setCookie(key, value, iDay) {\n        var oDate = new Date();\n        oDate.setDate(oDate.getDate() + iDay);\n        document.cookie = key + \'=\' + value + \';expires=\' + oDate;\n    }\n\n    function removeCookie(key) {\n        setCookie(key, \'\', -1);//这里只需要把Cookie保质期退回一天便可以删除\n        }\n\n        function getCookie(key) {\n            var cookieArr = document.cookie.split(\'; \');\n            for(var i = 0; i < cookieArr.length; i++) {\n                var arr = cookieArr[i].split(\'=\');\n            if(arr[0] === key) {\n                return arr[1];\n            }\n        }\n        return false;\n    }','cookie 使用教程','2019-11-11 13:34:17',00000000000),('ebb15f38-044f-11ea-9f87-001a7dda7113','centos7.2 安装卸载python3.7','Centos |python|','###一、安装依赖包\n    yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make -y\n    yum install libffi-devel -y\n\n###二、下载压缩包\n    wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz\n\n###三、解压、安装Python3.7.0\n    tar -zxvf Python-3.7.0.tgz\n    cd Python-3.7.0\n    ./configure\n    make&&make install\n\n###四、配置环境变量\n    mv /usr/bin/python /usr/bin/python.bak\n    ln -s /usr/local/bin/python3 /usr/bin/python\n    mv /usr/bin/pip /usr/bin/pip.bak\n    ln -s /usr/local/bin/pip3 /usr/bin/pip\n\n###五、卸载python3\n    rpm -qa|grep python3|xargs rpm -ev --allmatches --nodeps\n    whereis python3 |xargs rm -frv','centos7.2 安装python3.7','2019-11-11 14:53:09',00000000085),('ee836f18-259f-11ea-8974-0242ac110002','django 常用命令','Django|','#####参考链接\n    https://www.django.cn/course/show-4.html','django 常用命令','2019-12-23 16:19:01',00000000001),('f10ea0f6-1b57-11ea-a451-0242ac110002','爬虫xpath使用说明','爬虫 |','7\n         </ul>\n     </div>\n    \'\'\'\n    html = etree.HTML(text)\n    result = html.xpath(\'//li[1]/ancestor::*\')\n    print(result)\n    result = html.xpath(\'//li[1]/ancestor::div\')\n    print(result)\n    result = html.xpath(\'//li[1]/attribute::*\')\n    print(result)\n    result = html.xpath(\'//li[1]/child::a[@href=\"https://ask.hellobi.com/link1.html\"]\')\n    print(result)\n    result = html.xpath(\'//li[1]/descendant::span\')\n    print(result)\n    result = html.xpath(\'//li[1]/following::*[2]\')\n    print(result)\n    result = html.xpath(\'//li[1]/following-sibling::*\')\n    print(result)\n\n* 第一次选择我们调用了 ancestor 轴，可以获取所有祖先节点，其后需要跟两个冒号，然后是节点的选择器，这里我们直接使用了 *，表示匹配所有节点，因此返回结果是第一个 li 节点的所有祖先节点，包括 html，body，div，ul。\n\n* 第二次选择我们又加了限定条件，这次在冒号后面加了 div，这样得到的结果就只有 div 这个祖先节点了。\n\n* 第三次选择我们调用了 attribute 轴，可以获取所有属性值，其后跟的选择器还是 *，这代表获取节点的所有属性，返回值就是 li 节点的所有属性值。\n\n* 第四次选择我们调用了 child 轴，可以获取所有直接子节点，在这里我们又加了限定条件选取 href 属性为 link1.html 的 a 节点。\n\n* 第五次选择我们调用了 descendant 轴，可以获取所有子孙节点，这里我们又加了限定条件获取 span 节点，所以返回的就是只包含 span 节点而没有 a 节点。\n\n* 第六次选择我们调用了 following 轴，可以获取当前节点之后的所有节点，这里我们虽然使用的是 * 匹配，但又加了索引选择，所以只获取了第二个后续节点。\n\n* 第七次选择我们调用了 following-sibling 轴，可以获取当前节点之后的所有同级节点，这里我们使用的是 * 匹配，所以获取了所有后续同级节点。','xpath例子','2019-12-10 14:18:30',00000000001),('f97e2b26-0432-11ea-bbf3-001a7dda7113','flask 后端token验证','Flask |Token |','\n#####1.生成token\n    def generate_token(key, expire=3600):\n        ts_str = str(time.time() + expire)\n        ts_byte = ts_str.encode(\"utf-8\")\n        sha1_tshexstr = hmac.new(key.encode(\"utf-8\"), ts_byte, \'sha1\').hexdigest()\n        token = ts_str + \':\' + sha1_tshexstr\n        b64_token = base64.urlsafe_b64encode(token.encode(\"utf-8\"))\n        return b64_token.decode(\"utf-8\")\n\n#####2.验证token,用户id和token\n    def certify_token(key, token):\n        if key == \'null\':\n            return False\n        token_str = base64.urlsafe_b64decode(token).decode(\'utf-8\')\n        token_list = token_str.split(\':\')\n        if len(token_list) != 2:\n            return False\n        ts_str = token_list[0]\n        if float(ts_str) < time.time():\n            # token expired\n            return False\n        known_sha1_tsstr = token_list[1]\n        sha1 = hmac.new(key.encode(\"utf-8\"), ts_str.encode(\'utf-8\'), \'sha1\')\n        calc_sha1_tsstr = sha1.hexdigest()\n        if calc_sha1_tsstr != known_sha1_tsstr:\n            # token certification failed\n            return False\n            # token certification success\n        return True\n\n#####3.用户登录mysql模型\n    from passlib.apps import custom_app_context as pwd_context\n    from app import db\n\n\n    class User(db.Model):\n        __table_name__ = \'user\'\n        user_id = db.Column(db.INT, primary_key=True)\n        user_name = db.Column(db.String(255))\n        user_password = db.Column(db.String(255))\n\n        def __init__(self, **kwargs):\n            self.user_id = kwargs[\'id_u\']\n            self.user_name = kwargs[\'user_name\']\n            self.user_password = kwargs[\'user_password\']\n\n        def hash_password(self, password):\n            self.user_password = pwd_context.encrypt(password)\n\n        def verify_password(self, password):\n            return pwd_context.verify(password, self.user_password)\n\n#####4.登录模板\n    def login():\n        user_name = request.form.get(\'user_name\')\n        password = request.form.get(\'password\')\n        msg = User.query.filter(User.user_name == user_name).first()\n        if msg\n            if msg.verify_password(password):\n                token = generate_token(str(msg.user_id))\n                return jsonify({\'status\': 200})\n\n\n','flask后端token模板','2019-11-11 11:25:56',00000000010);
/*!40000 ALTER TABLE `notes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `top_category`
--

DROP TABLE IF EXISTS `top_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `top_category` (
  `uuid` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin  NOT NULL,
  `top_category_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin  NOT NULL,
  `sec_category` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin ,
  PRIMARY KEY (`uuid`),
  UNIQUE KEY `top_category_name` (`top_category_name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `top_category`
--

LOCK TABLES `top_category` WRITE;
/*!40000 ALTER TABLE `top_category` DISABLE KEYS */;
INSERT INTO `top_category` VALUES ('2ab13abd-37ba-4f07-9d6b-0c175575d6c1','linux','Centos|Yum|Linux|lsls|Matplotlib|'),('2c156b2a-1e82-4fbc-9276-5672f2196889','python','Pandas|Flask|爬虫|Python|Django|'),('4d0a2767-2af4-4901-96aa-92cd1ec043ef','sql','Mysql|'),('8f320d43-48e4-456a-8e91-ab4b4086c85b','other','收藏|Apache|Docker|Cookie|代理|Windows|Uwsgi|Vpn|服务器|Git|乱码|Token|Nginx|解压|'),('cd4bdb57-39fd-4240-bd9f-e453f152e2c3','javascript','React|Vue|');
/*!40000 ALTER TABLE `top_category` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-03-02 20:26:11
